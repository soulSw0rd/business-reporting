#!/usr/bin/env python3
"""
Dashboard Crypto Business Intelligence - Version simplifi√©e
Utilise uniquement les donn√©es du dossier /data
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import json
from pathlib import Path
import requests
from datetime import datetime, timedelta
import subprocess

# --- AJOUT POUR LA PAGE PREDICTIONS ---
from src.ml.predictor import CryptoMLPredictor, MLDataCollector
# --- FIN AJOUT ---

# Configuration de la page
st.set_page_config(
    page_title="Crypto Dashboard",
    page_icon="‚Çø",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialisation du pr√©dicteur ML
# On retire la base de donn√©es de simulation qui √©tait source de probl√®mes
predictor = CryptoMLPredictor(data_path="data/ml_training")

# Fonctions de chargement de donn√©es
@st.cache_data(ttl=600) # Cache de 10 minutes
def load_traders_data_for_prediction():
    """Charge le dernier fichier de donn√©es de traders pour la pr√©diction."""
    try:
        data_path = Path("data/processed")
        trader_files = sorted(data_path.glob("top_traders_prediction_*.json"), reverse=True)
        if trader_files:
            with open(trader_files[0], 'r') as f:
                return pd.DataFrame(json.load(f))
    except (FileNotFoundError, IndexError):
        return pd.DataFrame()
    return pd.DataFrame()

@st.cache_data(ttl=600)
def load_market_data_for_prediction():
    """Charge le dernier fichier de donn√©es de march√© pour la pr√©diction."""
    try:
        data_path = Path("data/processed")
        market_files = sorted(data_path.glob("market_data_prediction_*.json"), reverse=True)
        if market_files:
            with open(market_files[0], 'r') as f:
                return json.load(f)
    except (FileNotFoundError, IndexError):
        return None
    return None

# Fonctions utilitaires
def display_prediction(prediction, probability, trader_data, market_data):
    """Affiche le r√©sultat d'une pr√©diction avec une mise en page √©l√©gante."""
    if probability is not None:
        # Affichage du r√©sultat texte avec couleur
        if "Fortement" in prediction:
            st.success(f"**R√©sultat :** {prediction}")
        elif "Potentiellement" in prediction:
            st.warning(f"**R√©sultat :** {prediction}")
        else:
            st.error(f"**R√©sultat :** {prediction}")

        # Jauge de probabilit√© visuelle
        fig = go.Figure(go.Indicator(
            mode = "gauge+number",
            value = probability * 100,
            title = {'text': "Probabilit√© de Profit"},
            number = {'suffix': "%"},
            gauge = {
                'axis': {'range': [0, 100]},
                'bar': {'color': "white", 'thickness': 0.3},
                'steps': [
                    {'range': [0, 40], 'color': '#EF553B'},
                    {'range': [40, 60], 'color': '#FECB52'},
                    {'range': [60, 100], 'color': '#00CC96'}
                ],
            }))
        fig.update_layout(height=250, margin=dict(l=30, r=30, t=50, b=20))
        st.plotly_chart(fig, use_container_width=True)
        
        # --- Section des Indicateurs Cl√©s (KPIs) ---
        st.markdown("---")
        st.subheader("üìä Indicateurs Cl√©s Analys√©s")
        st.caption("Voici les donn√©es sp√©cifiques qui ont √©t√© utilis√©es par le mod√®le pour cette pr√©diction.")

        # KPIs du trader
        st.markdown("##### Performance du Trader")
        col1, col2, col3 = st.columns(3)
        col1.metric("PnL 7 derniers jours", trader_data.get('pnl_7d', 'N/A'))
        col2.metric("PnL 30 derniers jours", trader_data.get('pnl_30d', 'N/A'))
        col3.metric("Exposition 'Long'", trader_data.get('long_percentage', 'N/A'))

        # KPIs du march√©
        st.markdown("##### Contexte du March√©")
        btc_price = market_data.get('coingecko_btc', {}).get('price', 0)
        fear_greed = market_data.get('fear_and_greed_index', {}).get('value', 0)
        funding_rate = market_data.get('funding_rates', {}).get('BTCUSDT', {}).get('last_funding_rate', 0)
        
        col4, col5, col6 = st.columns(3)
        col4.metric("Prix du Bitcoin", f"${btc_price:,.0f}")
        col5.metric("Indice Peur & Cupidit√©", f"{fear_greed} / 100")
        col6.metric("Taux de Financement", f"{funding_rate:.4%}" if funding_rate else "N/A")

    else:
        st.error(f"**Erreur de pr√©diction :** {prediction}")

# --- MISE √Ä JOUR DES FONCTIONS DE DONN√âES ---
@st.cache_data(ttl=60)
def get_scraped_data():
    """
    R√©cup√®re les donn√©es scrap√©es depuis les fichiers JSON locaux.
    S√©pare les donn√©es pour la pr√©diction et pour l'analyse.
    """
    data_path = Path("data/processed")
    scraped_data = {
        'traders_for_analysis': [],
        'traders_for_prediction': []
    }
    if not data_path.exists():
        return scraped_data
        
    # Charger tous les fichiers non-traders
    for json_file in data_path.glob("*.json"):
        if "trader" not in json_file.name.lower():
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    scraped_data[json_file.stem] = json.load(f)
            except Exception:
                pass

    # --- Chargement des donn√©es pour l'ANALYSE ---
    # Utilise le fichier "extended" qui a des colonnes comme 'username', 'roi_percentage'
    extended_file = data_path / "top_traders_extended.json"
    if extended_file.exists():
        try:
            with open(extended_file, 'r', encoding='utf-8') as f:
                scraped_data['traders_for_analysis'] = json.load(f)
        except Exception:
            pass # La liste reste vide

    # --- Chargement des donn√©es pour la PR√âDICTION ---
    # Utilise le plus r√©cent des fichiers qui a la colonne 'address' et les PNL
    trader_files = sorted(data_path.glob("top_traders_*.json"), reverse=True)
    if trader_files:
        # Exclure le fichier 'extended' pour ne pas le prendre pour la pr√©diction
        prediction_files = [f for f in trader_files if "extended" not in f.name]
        if prediction_files:
            latest_trader_file = prediction_files[0]
            try:
                with open(latest_trader_file, 'r', encoding='utf-8') as f:
                    scraped_data['traders_for_prediction'] = json.load(f)
            except Exception:
                pass # La liste reste vide
    
    return scraped_data
# --- FIN MISE √Ä JOUR ---

def main():
    st.title("‚Çø CryptoTrader Dashboard - Business Intelligence")
    st.markdown("---")
    
    # Sidebar pour la navigation
    st.sidebar.title("üöÄ Navigation")
    
    # Bouton pour forcer le rafra√Æchissement
    if st.sidebar.button("üîÑ Forcer le rafra√Æchissement des donn√©es"):
        st.cache_data.clear()
        st.rerun()

    page = st.sidebar.selectbox(
        "Choisir une page",
        ["üè† Vue d'ensemble", "üëë Top Traders", "üîÆ Pr√©dictions", "üìä Analyse Crypto", "üìà Sentiment", "‚öôÔ∏è Donn√©es"]
    )
    
    # V√©rification des donn√©es disponibles
    scraped_data = get_scraped_data()
    
    # Affichage selon la page s√©lectionn√©e
    if page == "üè† Vue d'ensemble":
        show_overview(scraped_data)
    elif page == "üëë Top Traders":
        show_top_traders(scraped_data)
    elif page == "üîÆ Pr√©dictions":
        show_predictions_page(scraped_data)
    elif page == "üìä Analyse Crypto":
        show_crypto_analysis(scraped_data)
    elif page == "üìà Sentiment":
        show_sentiment_analysis(scraped_data)
    elif page == "‚öôÔ∏è Donn√©es":
        show_data_status(scraped_data)

def show_overview(scraped_data):
    """Affiche la page de vue d'ensemble bas√©e sur les donn√©es r√©elles"""
    st.header("üè† Vue d'ensemble du march√© crypto")
    
    # --- Utilisation EXPLICITE des donn√©es d'ANALYSE ---
    traders_list = scraped_data.get('traders_for_analysis', [])
    market_data = scraped_data.get('market_data_extended', {})
    historical_data = scraped_data.get('historical_data', [])
    sentiment_data = scraped_data.get('sentiment_data', {})

    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total Traders Analys√©s", len(traders_list))
    with col2:
        crypto_count = len(market_data.get('cryptocurrencies', []))
        st.metric("Cryptomonnaies Suivies", crypto_count)
    with col3:
        st.metric("Points de Donn√©es Historiques", len(historical_data))
    with col4:
        signals_count = len(sentiment_data.get('signals', []))
        st.metric("Signaux de Sentiment", signals_count)
    
    st.markdown("---")
    
    # Graphiques
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("üí∞ Top 10 Traders par PnL Total")
        st.caption("Bas√© sur les donn√©es d'analyse enrichies.")
        if traders_list:
            df = pd.DataFrame(traders_list)
            if 'total_pnl' in df.columns and 'username' in df.columns:
                top_traders = df.nlargest(10, 'total_pnl')
                fig = px.bar(top_traders, x='username', y='total_pnl', title="Top 10 Traders par Profit", color='total_pnl', color_continuous_scale='Viridis')
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("Donn√©es traders d'analyse incompl√®tes.")
        else:
            st.warning("Aucune donn√©e d'analyse de trader trouv√©e.")
    
    with col2:
        st.subheader("üìä Prix Actuels des Cryptomonnaies")
        st.caption("Snapshot des prix du march√©.")
        cryptos = market_data.get('cryptocurrencies', [])
        if cryptos:
            df = pd.DataFrame(cryptos)
            if 'symbol' in df.columns and 'price' in df.columns:
                fig = px.bar(df, x='symbol', y='price', title="Prix par Crypto", color='price', color_continuous_scale='Blues')
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("Donn√©es de march√© incompl√®tes.")
        else:
            st.warning("Aucune donn√©e de march√© disponible.")

def show_top_traders(scraped_data):
    """Affiche l'analyse des top traders bas√©e sur les donn√©es r√©elles"""
    st.header("üëë Analyse des Top Traders")
    
    # --- Utilisation EXPLICITE des donn√©es d'ANALYSE ---
    traders_list = scraped_data.get('traders_for_analysis', [])
    if not traders_list:
        st.error("‚ùå Aucune donn√©e d'analyse de trader trouv√©e.")
        st.info("V√©rifiez que le fichier `top_traders_extended.json` existe et est valide.")
        return
        
    traders_df = pd.DataFrame(traders_list)
    
    # V√©rifier les colonnes n√©cessaires pour l'analyse
    required_columns = ['roi_percentage', 'total_trades', 'win_rate', 'total_pnl', 'username']
    missing_columns = [col for col in required_columns if col not in traders_df.columns]
    
    if missing_columns:
        st.error(f"‚ùå Colonnes manquantes dans les donn√©es: {missing_columns}")
        st.write("Colonnes disponibles:", list(traders_df.columns))
        return
    
    # Afficher les colonnes pour debug si n√©cessaire
    if st.checkbox("üîç Afficher info debug", key="debug_traders"):
        st.write(f"Colonnes: {list(traders_df.columns)}")
        st.write(f"Forme des donn√©es: {traders_df.shape}")
        st.write("Premiers traders:", traders_df.head(2))
    
    # Filtres pour les traders
    col1, col2, col3 = st.columns(3)
    
    with col1:
        min_roi = st.slider("ROI minimum (%)", 0, 200, 20)
    
    with col2:
        min_trades = st.slider("Trades minimum", 0, 1000, 100)
    
    with col3:
        min_winrate = st.slider("Win Rate minimum (%)", 50, 90, 60)
    
    # Filtrage des donn√©es
    filtered_traders = traders_df[
        (traders_df['roi_percentage'] >= min_roi) &
        (traders_df['total_trades'] >= min_trades) &
        (traders_df['win_rate'] >= min_winrate/100)
    ]
    
    st.write(f"üìä {len(filtered_traders)} traders correspondent aux crit√®res")
    
    # Graphiques d'analyse des traders
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí∞ Top 10 - PnL Total")
        top_pnl = filtered_traders.nlargest(10, 'total_pnl')
        
        fig = px.bar(
            top_pnl,
            x='username',
            y='total_pnl',
            color='win_rate',
            title="Top Traders par PnL",
            color_continuous_scale='Viridis'
        )
        fig.update_layout(height=400, xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üìä Distribution ROI")
        fig = px.histogram(
            filtered_traders,
            x='roi_percentage',
            nbins=20,
            title="Distribution des ROI",
            color_discrete_sequence=['#FFD700']
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    # Tableau des traders
    st.subheader("üìã Tableau des Top Traders")
    
    # Formater les donn√©es pour l'affichage
    display_df = filtered_traders.copy()
    display_df['total_pnl'] = display_df['total_pnl'].apply(lambda x: f"${x:,.2f}")
    display_df['roi_percentage'] = display_df['roi_percentage'].apply(lambda x: f"{x:.1f}%")
    display_df['win_rate'] = display_df['win_rate'].apply(lambda x: f"{x:.1%}")
    
    # S√©lectionner les colonnes importantes
    cols_to_show = ['username', 'total_pnl', 'roi_percentage', 'win_rate', 'total_trades']
    
    st.dataframe(
        display_df[cols_to_show].head(20),
        use_container_width=True
    )

def show_crypto_analysis(scraped_data):
    """Affiche l'analyse des cryptomonnaies bas√©e sur les donn√©es r√©elles"""
    st.header("üìä Analyse du march√© crypto")
    
    # V√©rifier les donn√©es market_data_extended
    if not scraped_data or 'market_data_extended' not in scraped_data:
        st.error("‚ùå Fichier market_data_extended.json introuvable")
        return
    
    market_data = scraped_data['market_data_extended']
    if not isinstance(market_data, dict) or 'cryptocurrencies' not in market_data:
        st.error("‚ùå Structure incorrecte dans market_data_extended.json")
        return
    
    cryptos = market_data['cryptocurrencies']
    if not cryptos:
        st.error("‚ùå Aucune donn√©e crypto trouv√©e")
        return
    
    df = pd.DataFrame(cryptos)
    
    # Correction pour le ArrowTypeError : convertir les colonnes potentiellement mixtes
    if 'max_supply' in df.columns:
        df['max_supply'] = pd.to_numeric(df['max_supply'], errors='coerce').fillna(0)
    
    # S√©lection de crypto
    col1, col2 = st.columns(2)
    
    with col1:
        if 'symbol' in df.columns:
            selected_crypto = st.selectbox(
                "S√©lectionner une cryptomonnaie",
                df['symbol'].unique()
            )
        else:
            st.error("Colonne 'symbol' manquante")
            return
    
    with col2:
        # Afficher les donn√©es historiques si disponibles
        show_historical = st.checkbox("Afficher les donn√©es historiques", value=True)
    
    # Donn√©es de la crypto s√©lectionn√©e
    crypto_info = df[df['symbol'] == selected_crypto].iloc[0]
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if 'price' in crypto_info:
            st.metric("üí∞ Prix", f"${crypto_info['price']:,.2f}")
    
    with col2:
        if 'change_24h' in crypto_info:
            st.metric("üìà Change 24h", f"{crypto_info['change_24h']:+.2f}%")
    
    with col3:
        if 'volume_24h' in crypto_info:
            volume = crypto_info['volume_24h']
            st.metric("üìä Volume 24h", f"${volume/1e6:.1f}M" if volume > 1e6 else f"${volume:,.0f}")
    
    with col4:
        if 'market_cap' in crypto_info:
            mcap = crypto_info['market_cap']
            st.metric("üè™ Market Cap", f"${mcap/1e9:.2f}B" if mcap > 1e9 else f"${mcap/1e6:.1f}M")
    
    st.markdown("---")
    
    # Graphiques
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Comparaison des prix")
        fig = px.bar(
            df,
            x='symbol',
            y='price',
            color='change_24h',
            title="Prix par cryptomonnaie",
            color_continuous_scale='RdYlGn',
            color_continuous_midpoint=0
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üíπ Variations 24h")
        fig = px.bar(
            df,
            x='symbol',
            y='change_24h',
            color='change_24h',
            title="Changements 24h (%)",
            color_continuous_scale='RdYlGn',
            color_continuous_midpoint=0
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    # Donn√©es historiques si disponibles
    if show_historical and scraped_data and 'historical_data' in scraped_data:
        st.subheader(f"üìà Historique des prix - {selected_crypto}")
        
        historical_data = scraped_data['historical_data']
        if isinstance(historical_data, list):
            hist_df = pd.DataFrame(historical_data)
            
            if 'symbol' in hist_df.columns:
                crypto_hist = hist_df[hist_df['symbol'] == selected_crypto]
                
                if not crypto_hist.empty and 'date' in crypto_hist.columns:
                    crypto_hist = crypto_hist.sort_values('date')
                    
                    if 'close' in crypto_hist.columns:
                        fig = px.line(
                            crypto_hist,
                            x='date',
                            y='close',
                            title=f"√âvolution du prix de {selected_crypto}",
                            line_shape='linear'
                        )
                        fig.update_layout(height=400)
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("Colonne 'close' manquante dans les donn√©es historiques")
                else:
                    st.warning(f"Aucune donn√©e historique trouv√©e pour {selected_crypto}")
            else:
                st.warning("Colonne 'symbol' manquante dans les donn√©es historiques")
        else:
            st.warning("Format incorrect pour les donn√©es historiques")
    
    # Tableau d√©taill√©
    st.subheader("üìã Donn√©es d√©taill√©es")
    st.dataframe(df, use_container_width=True)

def show_sentiment_analysis(scraped_data):
    """Affiche l'analyse de sentiment bas√©e sur les donn√©es r√©elles"""
    st.header("üìà Analyse de Sentiment")
    
    # V√©rifier les donn√©es de sentiment
    if not scraped_data or 'sentiment_data' not in scraped_data:
        st.error("‚ùå Fichier sentiment_data.json introuvable")
        return
    
    sentiment_data = scraped_data['sentiment_data']
    if not isinstance(sentiment_data, dict):
        st.error("‚ùå Structure incorrecte dans sentiment_data.json")
        return
    
    # Sentiment global
    overall_sentiment = sentiment_data.get('overall_sentiment', {})
    if overall_sentiment:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            score = overall_sentiment.get('score', 0)
            st.metric("üìä Score Global", f"{score:.3f}")
        
        with col2:
            label = overall_sentiment.get('label', 'N/A')
            st.metric("üéØ Sentiment", label)
        
        with col3:
            confidence = overall_sentiment.get('confidence', 0)
            st.metric("üîç Confiance", f"{confidence:.1%}")
    
    st.markdown("---")
    
    # Signaux par crypto
    signals = sentiment_data.get('signals', [])
    if signals:
        st.subheader("üì° Signaux par Cryptomonnaie")
        
        df_signals = pd.DataFrame(signals)
        
        if 'symbol' in df_signals.columns:
            # Graphique des scores de sentiment
            col1, col2 = st.columns(2)
            
            with col1:
                if 'sentiment_score' in df_signals.columns:
                    fig = px.bar(
                        df_signals,
                        x='symbol',
                        y='sentiment_score',
                        color='sentiment_score',
                        title="Score de sentiment par crypto",
                        color_continuous_scale='RdYlGn',
                        color_continuous_midpoint=0
                    )
                    fig.update_layout(height=400)
                    st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                if 'social_volume' in df_signals.columns:
                    fig = px.bar(
                        df_signals,
                        x='symbol',
                        y='social_volume',
                        title="Volume social par crypto",
                        color='social_volume',
                        color_continuous_scale='Blues'
                    )
                    fig.update_layout(height=400)
                    st.plotly_chart(fig, use_container_width=True)
            
            # Tableau des signaux d√©taill√©s
            st.subheader("üìã Signaux d√©taill√©s")
            
            # Restructurer les signaux pour l'affichage
            detailed_signals = []
            for signal in signals:
                if 'signals' in signal:
                    for sig in signal['signals']:
                        detailed_signals.append({
                            'Crypto': signal.get('symbol', 'N/A'),
                            'Type': sig.get('type', 'N/A'),
                            'Direction': sig.get('direction', 'N/A'),
                            'Force': sig.get('strength', 'N/A'),
                            'Confiance': f"{sig.get('confidence', 0):.1%}",
                            'Timestamp': sig.get('timestamp', 'N/A')
                        })
            
            if detailed_signals:
                df_detailed = pd.DataFrame(detailed_signals)
                st.dataframe(df_detailed, use_container_width=True)
            
            # Affichage brut des donn√©es
            st.subheader("üìä Donn√©es brutes")
            st.caption("Donn√©es de sentiment brutes agr√©g√©es par cryptomonnaie.")
            st.dataframe(df_signals, use_container_width=True)
        else:
            st.warning("Colonne 'symbol' manquante dans les signaux")
    else:
        st.warning("Aucun signal trouv√©")

def show_data_status(scraped_data):
    """Affiche le statut des donn√©es locales."""
    st.header("‚öôÔ∏è Statut des Donn√©es")
    st.info("Cette page montre les informations sur les derniers fichiers de donn√©es charg√©s.")
    
    data_path = Path("data/processed")
    if not data_path.exists():
        st.error("Le dossier data/processed n'existe pas.")
        return
    
    files_info = []
    for json_file in data_path.glob("*.json"):
        try:
            mtime = datetime.fromtimestamp(json_file.stat().st_mtime)
            files_info.append({
                "Fichier": json_file.name,
                "Derni√®re modification": mtime.strftime('%Y-%m-%d %H:%M:%S'),
                "Taille (ko)": f"{json_file.stat().st_size / 1024:.2f}"
            })
        except Exception:
            pass

    if files_info:
        df = pd.DataFrame(files_info)
        st.dataframe(df, use_container_width=True)
    else:
        st.warning("Aucun fichier JSON trouv√© dans data/processed.")

# --- DEBUT NOUVELLE PAGE PREDICTIONS ---
def show_predictions_page(scraped_data):
    """Affiche la page des pr√©dictions de profitabilit√© des traders."""
    st.subheader("üîÆ Pr√©dictions de Profitabilit√© des Traders")
    
    if st.button("üîÑ G√©n√©rer de nouvelles donn√©es de pr√©diction"):
        try:
            # Ex√©cuter le nouveau script de g√©n√©ration de donn√©es
            result = subprocess.run(['python', 'generate_prediction_data.py'], capture_output=True, text=True, check=True)
            st.toast("Nouvelles donn√©es g√©n√©r√©es !")
            print(result.stdout)
            st.cache_data.clear() # Vider le cache pour recharger les nouvelles donn√©es
        except subprocess.CalledProcessError as e:
            st.error(f"Erreur lors de la g√©n√©ration des donn√©es : {e.stderr}")
        except FileNotFoundError:
            st.error("Erreur : Le script 'generate_prediction_data.py' est introuvable.")

    # Charger les donn√©es depuis les nouveaux fichiers
    traders_df = load_traders_data_for_prediction()
    market_data = load_market_data_for_prediction()

    if traders_df.empty or market_data is None:
        st.warning("Aucune donn√©e de pr√©diction disponible. Veuillez d'abord en g√©n√©rer.")
        return

    st.dataframe(traders_df)

    selected_trader_address = st.selectbox(
        "S√©lectionnez un trader pour voir les pr√©dictions :",
        traders_df['address'],
        format_func=lambda x: f"{x[:6]}...{x[-4:]}"
    )
            
    if selected_trader_address:
        trader_data = traders_df[traders_df['address'] == selected_trader_address].iloc[0]
        
        st.write(f"#### Analyse pour le trader : `{selected_trader_address}`")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("**Pr√©diction √† 7 jours**")
            if st.button("Lancer la pr√©diction (7 jours)"):
                pred_7d, prob_7d = predictor.predict_trader_profitability(trader_data, market_data, horizon_days=7)
                display_prediction(pred_7d, prob_7d, trader_data, market_data)
        
        with col2:
            st.info("**Pr√©diction √† 30 jours**")
            if st.button("Lancer la pr√©diction (30 jours)"):
                pred_30d, prob_30d = predictor.predict_trader_profitability(trader_data, market_data, horizon_days=30)
                display_prediction(pred_30d, prob_30d, trader_data, market_data)

# --- FIN NOUVELLE PAGE PREDICTIONS ---

if __name__ == "__main__":
    main()
